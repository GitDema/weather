{"version":3,"sources":["WeatherList.js","App.js","redux/actions/index.js","redux/reducers/savedWeathers.js","redux/reducers/index.js","index.js"],"names":["dataList","data","className","src","weather","icon","alt","description","Math","round","main","temp","wind","speed","humidity","coord","lon","lat","weather_api_key","App","props","getWeatherData","region","state","axios","method","url","then","res","status","setState","weatherByCity","catch","err","searchError","handleSave","cityWeather","addCityToList","country","val","this","savedWeathers","removeCityFromList","value","onChange","selectCountry","selectRegion","style","color","WeatherList","onClick","length","map","city","index","key","name","height","class","Component","connect","dispatch","type","cityIndex","action","newState","push","splice","combineReducers","store","composeWithDevTools","applyMiddleware","save","createStore","createStoreWithMiddleware","rootReducer","load","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61192287.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./css/WeatherData.css\";\n\nconst dataList = ({ data }) => {\n  return (\n    <div className=\"weather-data\">\n      <div className=\"weather-data-main\">\n        <img\n          src={`http://openweathermap.org/img/wn/${\n            data.weather[0].icon\n          }@2x.png`}\n          alt=\"icon\"\n        />\n        <p>{data.weather[0].description}</p>\n      </div>\n\n      <ul className=\"weather-data-list\">\n        <li className=\"weather-data-list_item\">\n          <p className=\"weather-data-list_item-title\">\n            Temperature <span>(&#8451;)</span>:\n          </p>\n          <p className=\"weather-data-list_item-value\">\n            {Math.round(data.main.temp)}\n          </p>\n        </li>\n        <li className=\"weather-data-list_item\">\n          <p className=\"weather-data-list_item-title\">\n            Wind <span>(meter/sec)</span>:\n          </p>\n          <p className=\"weather-data-list_item-value\">\n            {Math.round(data.wind.speed)}\n          </p>\n        </li>\n        <li className=\"weather-data-list_item\">\n          <p className=\"weather-data-list_item-title\">\n            Humidity <span>(%)</span>:\n          </p>\n          <p className=\"weather-data-list_item-value\">{data.main.humidity}</p>\n        </li>\n        <li className=\"weather-data-list_item\">\n          <p className=\"weather-data-list_item-title\">\n            Coordinates <span>(long/lat)</span>:\n          </p>\n          <p className=\"weather-data-list_item-value\">\n            {data.coord.lon} / {data.coord.lat}\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default dataList;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CountryDropdown, RegionDropdown } from \"react-country-region-selector\";\nimport axios from \"axios\";\n\nimport { addCityToList, removeCityFromList } from \"./redux/actions\";\nimport WeatherList from \"./WeatherList\";\nimport \"./css/App.css\";\n\nconst weather_api_key = \"b81db6432bb2b2d4ab273de0852795d6\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"\",\n      region: \"\",\n      searchError: \"\",\n      weatherByCity: null\n    };\n  }\n\n  selectCountry(val) {\n    this.setState({ country: val, searchError: false, weatherByCity: false });\n  }\n\n  selectRegion(val) {\n    this.setState(\n      { region: val, searchError: false, weatherByCity: false },\n      this.getWeatherData\n    );\n  }\n\n  getWeatherData = () => {\n    const { region } = this.state;\n\n    axios({\n      method: \"get\",\n      url: `http://api.openweathermap.org/data/2.5/weather?q=${region}&appid=${weather_api_key}&units=metric`\n    })\n      .then(res => {\n        if (res.status === 200) {\n          this.setState({ weatherByCity: res.data });\n        }\n      })\n      .catch(err => {\n        this.setState({ searchError: \"City not found\" });\n      });\n  };\n\n  handleSave = cityWeather => {\n    this.props.addCityToList(cityWeather);\n    this.setState({ weatherByCity: null, country: \"\", region: \"\" });\n  };\n\n  render() {\n    const { country, region, searchError, weatherByCity } = this.state;\n    const { savedWeathers, removeCityFromList } = this.props;\n\n    return (\n      <div className=\"app\">\n        <div className=\"app-main\">\n          <div className=\"selection\">\n            <p>Country:</p>\n            <CountryDropdown\n              className=\"select\"\n              value={country}\n              onChange={val => this.selectCountry(val)}\n            />\n          </div>\n\n          {country ? (\n            <div className=\"selection\">\n              <p>City:</p>\n              <RegionDropdown\n                className=\"select\"\n                country={country}\n                value={region}\n                onChange={val => this.selectRegion(val)}\n              />\n            </div>\n          ) : null}\n\n          {searchError && <p style={{ color: \"#af0707\" }}>{searchError}</p>}\n\n          {weatherByCity ? (\n            <Fragment>\n              <WeatherList data={weatherByCity} />\n              <button\n                className=\"btn\"\n                onClick={() => this.handleSave(weatherByCity)}\n              >\n                Save\n              </button>\n            </Fragment>\n          ) : null}\n        </div>\n\n        {savedWeathers.length > 0 ? (\n          <div>\n            <h2>Saved Cities:</h2>\n            {savedWeathers.map((city, index) => (\n              <div>\n                <div className=\"saved-list__item\">\n                  <p key={index}>{city.name}</p>\n                  <img\n                    src={`http://openweathermap.org/img/wn/${\n                      city.weather[0].icon\n                    }@2x.png`}\n                    alt=\"icon\"\n                    style={{ height: 50 }}\n                  />\n                  <p>{Math.round(city.main.temp)} &#8451;</p>\n                  <div\n                    class=\"cross-wrap\"\n                    onClick={() => removeCityFromList(index)}\n                  >\n                    <div class=\"cross\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    savedWeathers: state.savedWeathers\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addCityToList: city => {\n      dispatch(addCityToList(city));\n    },\n    removeCityFromList: cityIndex => {\n      dispatch(removeCityFromList(cityIndex));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","export const addCityToList = city => ({\n  type: \"ADD_CITY\",\n  city\n});\n\nexport const removeCityFromList = cityIndex => ({\n  type: \"REMOVE_CITY\",\n  cityIndex\n});\n","const savedWeathers = (state = [], action) => {\n  switch (action.type) {\n    case \"ADD_CITY\":\n      const newState = [...state];\n      newState.push(action.city);\n      return newState;\n\n    case \"REMOVE_CITY\":\n      state.splice(action.cityIndex, 1);\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default savedWeathers;\n","import { combineReducers } from \"redux\";\nimport savedWeathers from \"./savedWeathers\";\n\nexport default combineReducers({\n  savedWeathers\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nimport App from \"./App\";\nimport rootReducer from \"./redux/reducers\";\nimport \"./css/index.css\";\n\nconst createStoreWithMiddleware = composeWithDevTools(applyMiddleware(save()))(\n  createStore\n);\n\nconst store = createStoreWithMiddleware(rootReducer, load());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}